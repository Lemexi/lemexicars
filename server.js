// server.js ‚Äî Telegram + SQLite + Apify + /scrape + /top + /stop
import 'dotenv/config';
import express from 'express';
import morgan from 'morgan';
import fetch from 'node-fetch';

import { runApify } from './apify.js';
import { hasSeen, markSeen, countSeen } from './db.js';
import {
  parseStartUrls, adHash, filterFreshAndPrice,
  fmtItem, extractPriceNumber, getPublishedAt
} from './scraper.js';
import { findHotDeals } from './top.js';

/* ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const PORT = process.env.PORT || 8080;

// Telegram
const BOT_TOKEN = process.env.BOT_TOKEN || process.env.TELEGRAM_TOKEN;
const TELEGRAM_API = BOT_TOKEN ? `https://api.telegram.org/bot${BOT_TOKEN}` : '';
const TG_WEBHOOK_SECRET = process.env.TG_WEBHOOK_SECRET || 'olxhook';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';
const ALLOWED_CHAT_IDS = (process.env.ALLOWED_CHAT_IDS || '')
  .split(',').map(s => s.trim()).filter(Boolean);

// –ü–æ–∏—Å–∫
const START_URLS = parseStartUrls(process.env.START_URLS);
const PRICE_MIN = Number(process.env.PRICE_MIN || 1000);
const PRICE_MAX = Number(process.env.PRICE_MAX || 22000);
const ITEMS_LIMIT = Number(process.env.ITEMS_LIMIT || 100);
const FRESH_DAYS = Number(process.env.FRESH_DAYS || 7);

// –ö—Ä–æ–Ω
let cronTimer = null;
let cronEnabled = (process.env.ENABLE_CRON || 'true').toLowerCase() === 'true';
const CRON_EVERY_MIN = Number(process.env.CRON_EVERY_MIN || 15);

/* ‚îÄ‚îÄ APP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const app = express();
app.use(express.json({ limit: '1mb' }));
app.use(morgan('dev'));

function allowChat(chatId) {
  if (!ALLOWED_CHAT_IDS.length) return true;
  return ALLOWED_CHAT_IDS.includes(String(chatId));
}

async function tgSend(chatId, text, opts = {}) {
  if (!BOT_TOKEN) {
    console.error('tgSend: BOT_TOKEN not set');
    return { ok: false, error: 'BOT_TOKEN not set' };
  }
  const url = `${TELEGRAM_API}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    disable_web_page_preview: false,
    ...opts,
  };
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });
  const j = await r.json();
  if (!j.ok) console.error('Telegram sendMessage failed:', j);
  return j;
}

/* ‚îÄ‚îÄ CORE: /scrape ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
async function runScrape(chatId) {
  await tgSend(chatId, `üîé –ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∞–ø–∏–Ω–≥ OLX‚Ä¶\n–õ–∏–º–∏—Ç: ${ITEMS_LIMIT}, —Ü–µ–Ω–∞: ${PRICE_MIN}‚Äì${PRICE_MAX}, —Å–≤–µ–∂–µ—Å—Ç—å: ‚â§${FRESH_DAYS} –¥–Ω–µ–π`);
  const raw = await runApify(START_URLS, ITEMS_LIMIT);
  await tgSend(chatId, `‚ÑπÔ∏è Apify –≤–µ—Ä–Ω—É–ª: ${raw.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤).`);

  const filtered = filterFreshAndPrice(raw, {
    priceMin: PRICE_MIN,
    priceMax: PRICE_MAX,
    freshDays: FRESH_DAYS   // –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ
  });

  let sent = 0, skipped = 0;
  for (const it of filtered) {
    const hash = adHash(it);
    if (hasSeen(hash)) { skipped++; continue; }
    const price = extractPriceNumber(it);
    const pub = getPublishedAt(it);
    markSeen(hash, {
      url: it.url || it.link || it.detailUrl || '',
      title: it.title || it.name || '',
      price,
      publishedAt: pub,
      reason: 'scrape'
    });
    await tgSend(chatId, fmtItem(it));
    sent++;
  }
  await tgSend(chatId, `‚úÖ –ì–æ—Ç–æ–≤–æ. –ù–æ–≤—ã—Ö: ${sent}, –ø—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–≤—Ç–æ—Ä—ã/—Å—Ç–∞—Ä—å—ë/–≤–Ω–µ–¥–∏–∞–ø–∞–∑–æ–Ω): ${filtered.length - sent}.`);
}

/* ‚îÄ‚îÄ CORE: /top ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const HOT_DISCOUNT = Number(process.env.HOT_DISCOUNT || 0.15); // 15%
const HOT_MIN_GROUP = Number(process.env.HOT_MIN_GROUP || 5);

async function runTop(chatId) {
  const seenTotal = countSeen();
  // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞—Ç—å ¬´–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1000‚Äì22000¬ª,
  // —Ç.–µ. –ù–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Å–≤–µ–∂–µ—Å—Ç—å—é –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.
  const freshForTop = seenTotal === 0 ? null : FRESH_DAYS;

  await tgSend(chatId,
    `üî• –ò—â—É —Ç–æ–ø-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚Ä¶\n` +
    `–£—Å–ª–æ–≤–∏–µ: —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ ‚â•${Math.round(HOT_DISCOUNT*100)}% (–≥—Ä—É–ø–ø–∞ ‚â•${HOT_MIN_GROUP}).\n` +
    `–°–≤–µ–∂–µ—Å—Ç—å –¥–ª—è TOP: ${freshForTop ? ('‚â§'+freshForTop+' –¥–Ω–µ–π') : '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'}`
  );

  const raw = await runApify(START_URLS, ITEMS_LIMIT);
  await tgSend(chatId, `‚ÑπÔ∏è Apify –≤–µ—Ä–Ω—É–ª: ${raw.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤).`);

  // –î–ª—è baseline –ø—Ä–∏ –ø—É—Å—Ç–æ–π –ë–î ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏,
  // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–º–∫–∏ —Ü–µ–Ω—ã
  const filtered = filterFreshAndPrice(raw, {
    priceMin: PRICE_MIN,
    priceMax: PRICE_MAX,
    freshDays: freshForTop   // null => –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
  });

  const hot = findHotDeals(filtered, {
    minGroupSize: HOT_MIN_GROUP,
    discount: HOT_DISCOUNT,
    maxRefsPerGroup: 10
  });

  let sent = 0, skipped = 0;
  for (const h of hot) {
    const it = h.item;
    const hash = adHash(it);
    if (hasSeen(hash)) { skipped++; continue; }

    const price = extractPriceNumber(it);
    const pub = getPublishedAt(it);

    markSeen(hash, {
      url: it.url || it.link || it.detailUrl || '',
      title: it.title || it.name || '',
      price,
      publishedAt: pub,
      reason: 'top'
    });

    const badge = `üî• <b>–¢–û–ü:</b> —Ü–µ–Ω–∞ ‚â§ ${h.threshold.toFixed(0)} (—Å—Ä. ${h.avg.toFixed(0)})`;
    await tgSend(chatId, fmtItem(it, badge));
    sent++;
  }

  await tgSend(chatId, `üèÅ –¢–æ–ø-—Å–∫–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–æ–≤—ã—Ö –¢–û–ü–æ–≤: ${sent}, –ø—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–≤—Ç–æ—Ä—ã): ${skipped}.`);
}

/* ‚îÄ‚îÄ CRON CONTROL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function startCron(chatIdForLogs = TELEGRAM_CHAT_ID) {
  stopCron(); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  const ms = CRON_EVERY_MIN * 60 * 1000;
  cronTimer = setInterval(() => runScrape(TELEGRAM_CHAT_ID), ms);
  cronEnabled = true;
  console.log(`CRON started: every ${CRON_EVERY_MIN} min`);
  if (chatIdForLogs) tgSend(chatIdForLogs, `‚è± –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω: –∫–∞–∂–¥—ã–µ ${CRON_EVERY_MIN} –º–∏–Ω.`);
}
function stopCron(chatIdForLogs) {
  if (cronTimer) {
    clearInterval(cronTimer);
    cronTimer = null;
  }
  if (cronEnabled) {
    cronEnabled = false;
    console.log('CRON stopped');
    if (chatIdForLogs) tgSend(chatIdForLogs, '‚èπ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  }
}

/* ‚îÄ‚îÄ TELEGRAM WEBHOOK ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
app.post('/tg/webhook', async (req, res) => {
  const { secret } = req.query;
  if (secret !== TG_WEBHOOK_SECRET) return res.status(403).json({ ok: false, error: 'forbidden' });

  try {
    const update = req.body;
    if (!update?.message) return res.json({ ok: true });
    const msg = update.message;
    const chatId = msg.chat.id;
    const text = (msg.text || '').trim();

    if (!allowChat(chatId)) {
      await tgSend(chatId, '‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.');
      return res.json({ ok: true });
    }

    if (/^\/start\b/i.test(text)) {
      await tgSend(chatId,
        `–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ OLX.\n` +
        `–ö–æ–º–∞–Ω–¥—ã:\n` +
        `/scrape ‚Äî —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤) + –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ ${CRON_EVERY_MIN} –º–∏–Ω\n` +
        `/top ‚Äî –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ ‚â•${Math.round(HOT_DISCOUNT*100)}%)\n` +
        `/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫\n` +
        `/help ‚Äî –ø–æ–º–æ—â—å`
      );
    } else if (/^\/help\b/i.test(text)) {
      await tgSend(chatId,
        `–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
        `‚Ä¢ –°—Å—ã–ª–∫–∏: ${START_URLS.length}\n` +
        `‚Ä¢ –¶–µ–Ω–∞: ${PRICE_MIN}‚Äì${PRICE_MAX}\n` +
        `‚Ä¢ –°–≤–µ–∂–µ—Å—Ç—å (—Å–∫—Ä–∞–ø): ‚â§${FRESH_DAYS} –¥–Ω–µ–π\n` +
        `‚Ä¢ –ö—Ä–æ–Ω: –∫–∞–∂–¥—ã–µ ${CRON_EVERY_MIN} –º–∏–Ω (${cronEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'})`
      );
    } else if (/^\/stop\b/i.test(text)) {
      stopCron(chatId);
    } else if (/^\/top\b/i.test(text)) {
      await runTop(chatId);
    } else if (/^\/scrape\b/i.test(text)) {
      // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ + –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ
      await runScrape(chatId);
      if (!cronEnabled) startCron(chatId);
    } else {
      await tgSend(chatId, '–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π /scrape, /top, /stop –∏–ª–∏ /help.');
    }

    res.json({ ok: true });
  } catch (e) {
    console.error('webhook error', e);
    res.status(500).json({ ok: false, error: String(e) });
  }
});

/* ‚îÄ‚îÄ UTILS/ROUTES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
app.get('/', (req, res) => res.json({ ok: true, ts: Date.now() }));
app.get('/health', (req, res) => res.json({ ok: true }));
app.get('/tg/test', async (req, res) => {
  const { secret, text, chatId } = req.query;
  if (secret !== TG_WEBHOOK_SECRET) return res.status(403).json({ ok: false, error: 'forbidden' });
  const id = chatId || TELEGRAM_CHAT_ID;
  if (!id) return res.status(400).json({ ok: false, error: 'no chatId' });
  const r = await tgSend(id, text || 'pong');
  res.json(r);
});

/* ‚îÄ‚îÄ START ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
app.listen(PORT, () => {
  console.log('Listening on', PORT);
  if (cronEnabled) startCron(); // –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –≤ ENV
});
